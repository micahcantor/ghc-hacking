Synthesizing with Monad stacks

We need to first set up the ghc program to generate the unwrapping function

Think about what we are given, and what we would need to search if we were not given one aspect of that.

For auto-writing an unwrapping function: find/identify the unwrapping functions that we have.

GHC.HS.Utils


10/13  
-------
- ask about getting type from fully qualified name for Identity and IO

11/1
------
- tcTypeUnify, tcView, expandSynTyCon_maybe (GHC.Core.Type)
- figure out way to lookup type synonyms
- maybe compare function types a differenet way, generating a dummy output type
- https://downloads.haskell.org/ghc/latest/docs/users_guide/extending_ghc.html

11/8
---------
Next steps:
- generating with local parameter name
- handle cases where there's multiple possible unwrappers (runStateT, evalStateT)
- handle errors when synthesis is not possible
- think about editor integration to place the generated definition somewhere other than stdout

11/15
---------
- seems like it's not possible to fill a local parameter name, placing a hole there instead.
- errors are now handled with a general and extensible framework

- look into inlay hint and CodeLens or IntelliSense